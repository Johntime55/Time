Install-Package ClosedXML

using ClosedXML.Excel;

Trebuie să înlocuiești numele tabelei și numele câmpurilor corespunzătoare din codul de mai sus pentru a se potrivi structurii bazei tale de date și numelui tabelei respective.

După ce ai implementat aceste modificări în codul tău, ar trebui să poți importa și actualiza datele din fișierele Excel folosind aceeași logică ca și în cazul fișierelor CSV. Este important să efectuezi teste pentru a te asigura că funcționalitatea funcționează așa cum te aștepți în mediuul tău specific.

// Metodă pentru a parsa Excel folosind ClosedXML
private static List<Library> ParseExcel(string filepath)
{
    var fileData = new List<Library>();
    try
    {
        using (var workbook = new XLWorkbook(filepath))
        {
            var worksheet = workbook.Worksheet(1); // Poți ajusta numărul de index al foilor pentru nevoile tale
            var rows = worksheet.RowsUsed();

            foreach (var row in rows.Skip(1)) // Trecem peste antetul cu numele coloanelor
            {
                var rowData = row.Cells().Select(cell => cell.Value.ToString()).ToList();
                var item = new Library
                {
                    id = Convert.ToInt32(rowData[0]),
                    BookName = rowData[1],
                    Author = rowData[2],
                    Isbn13 = rowData[3],
                    Isbn10 = rowData[4],
                    Publisher = rowData[5],
                    YearPublished = rowData[6],
                    CoverImage = rowData[7],
                    QtyAvailable = Convert.ToInt32(rowData[8])
                };
                fileData.Add(item);
            }
        }

        // Afisare date parsate pentru fiecare carte
        foreach (var book in fileData)
        {
            Console.WriteLine($"id: {book.id}, Author: {book.Author}, ISBN13: {book.Isbn13}, ISBN10: {book.Isbn10}, Publisher: {book.Publisher}");
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error while processing file: {ex.Message}");
    }

    return fileData;
}

// Metodă pentru a importa datele din Excel și gestiona actualizările
private static void ImportAndHandleChangesFromExcel(List<Library> fileData, Logger logger)
{
    try
    {
        var db = new I_CoposEntities();
        bool duplicateMessageLogged = false;
        int duplicateCount = 0;

        foreach (var item in fileData)
        {
            var existingBook = db.Libraries.FirstOrDefault(b => b.Id == item.Isbn13);
            if (existingBook != null)
            {
                if (!duplicateMessageLogged)
                {
                    logger.Log($"Duplicate entry found for ISBN13: {item.Isbn13}. Removing...");
                    duplicateMessageLogged = true;
                }
                db.Libraries.Remove(existingBook);
                duplicateCount++;
            }
        }

        if (duplicateMessageLogged)
        {
            Console.WriteLine($"Deleted {duplicateCount} duplicate entries");
            db.SaveChanges();
        }

        int updatedCount = 0;
        foreach (var newItem in fileData)
        {
            var existingItem = db.Libraries.FirstOrDefault(b => b.Id == newItem.Isbn13);
            if (existingItem != null)
            {
                // Verificați dacă trebuie să faceți actualizări pentru câmpuri
                if (existingItem.SomeField != newItem.SomeField)
                {
                    existingItem.SomeField = newItem.SomeField;
                    updatedCount++;
                }
            }
        }

        if (updatedCount > 0)
        {
            db.SaveChanges();
            Console.WriteLine($"Updated {updatedCount} records.");
        }
        else
        {
            Console.WriteLine("No changes found.");
        }

        // Inserare în blocuri (bulk insert) pentru fișiere Excel
        if (fileData.Count > 0)
        {
            db.Libraries.AddRange(fileData);
            db.SaveChanges();
            Console.WriteLine($"Inserted {fileData.Count} new records.");
        }
    }
    catch (Exception ex)
    {
        logger.Log($"Error importing data: {ex.Message}");
    }
}

using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using CsvHelper;
using CsvHelper.Configuration;
using System.Text.RegularExpressions;
using System.Linq;
using System.Threading;
using OneTimeFileImporterSample.Data;
using ClosedXML.Excel; // Adăugăm namespace-ul pentru lucrul cu fișierele Excel

namespace OneTimeFileImporterSample
{
    internal class Program
    {
        private static void Main(string[] args)
        {
            const string filepath = @"C:\Users\user\Desktop\Saptamana 4\books.xlsx"; // Specificăm calea către fișierul Excel

            Logger logger = new Logger("log.txt");

            if (!IsFileAvailable(filepath))
            {
                Console.WriteLine("File is currently in use. Please try again");
                logger.Log("File is currently in use. Please try again");
                return;
            }

            logger.Log("Application starting");

            bool continueRunning = true;

            do
            {
                Console.WriteLine("Select Method to parse file:\n 1 ParseCsv \n 2 Parse with CsvHelper \n 3 Parse Excel \n 4 Exit");
                var selection = Console.ReadLine();

                switch (selection)
                {
                    case "1":
                        var importData = ParseCsv(filepath);
                        var imported = ImportAndHandleChanges(importData, logger);
                        if (imported)
                        {
                            logger.Log("Import completed successfully");
                            Thread.Sleep(2000);
                        }
                        break;
                    case "2":
                        importData = ParseFileUsingCsvReader(filepath);
                        imported = ImportAndHandleChanges(importData, logger);
                        if (imported)
                        {
                            logger.Log("Import completed successfully");
                            Thread.Sleep(2000);
                        }
                        break;
                    case "3":
                        importData = ParseExcel(filepath); // Parsare Excel utilizând funcția ParseExcel
                        ImportAndHandleChangesFromExcel(importData, logger); // Import în baza de date utilizând funcția ImportAndHandleChangesFromExcel
                        break;
                    case "4":
                        continueRunning = false;
                        Console.WriteLine("Program Exit");
                        logger.Log("Program Exit");
                        break;
                    default:
                        Console.WriteLine("Invalid selection, Try Again");
                        logger.Log("Invalid selection, Try Again");
                        break;
                }
            } while (continueRunning);
        }

        // Restul codului rămâne neschimbat
    }
}
